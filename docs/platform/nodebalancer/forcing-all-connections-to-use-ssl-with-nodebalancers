---
author:
  name: Joel Kruger
  email: jkruger@linode.com
description: 'Forcing all connections to use SSL with NodeBalancers.'
keywords: 'Linode,NodeBalancer,SSL,redirect'
license: '[CC BY-ND 3.0](http://creativecommons.org/licenses/by-nd/3.0/us/)'
modified: Monday, May 11th, 2015
modified_by:
  name: Joel Kruger
published: 'Monday, May 17th, 2015'
title: Forcing SSL connections with Nodebalancers
---

This guide provides step-by-step instructions for configuring a NodeBalancer to redirect all connections to SSL over port 443/HTTPS. Provisions will be provided to configure this with both the Apache and Nginx web servers. You will be responsible, however, for determining the appropriate document root as recommended by the distribution of Linux that your will be using.

 {: .note }
>
> Throughout this guide we will offer several suggested values for specific configuration settings, some of these values will be set by default. These settings are shown in the guide as a reference and you may need to modify them to suit your application accordingly.

## Prerequisites

- Your Linode should already be set up according to the instructions in our [Getting Started](/docs/getting-started) guide, and it is suggested that security precautions be implemented. For assistance with this, please see our documentation: [Securing Your Server](https://linode.com/docs/security/securing-your-server)

- This guide assumes that you have already deployed two Linodes, configured with either a LAMP stack, or a LEMP Stack

- This guide assumes that you have already deployed a Nodebalancer

{: .note}
>This guide is written, assuming that you are logged in as the root user and that you will not need to prepend commands with ``sudo``.

### Set the Hostname

Before you begin installing and configuring the components described in this guide, please make sure you've followed our instructions for [setting your hostname](https://www.linode.com/docs/getting-started#setting-the-hostname). Issue the following commands to make sure it is set properly:

    hostname
    hostname -f

The first command should show your short hostname, and the second should show your fully qualified domain name (FQDN).

Install and Configure the Apache Web Server
-------------------------------------------

The Apache Web Server is a very popular choice for serving web pages. While many alternatives have appeared in the last few years, Apache remains a powerful option that we recommend for most uses.

1. Update existing packages:

        sudo yum update

2. Install the current version of the Apache web server (in the 2.x series):

        sudo yum install httpd

3. The configuration for Apache is contained in the `httpd.conf` file, which is located at: `/etc/httpd/conf/httpd.conf`. We advise you to make a backup of this file into your home directory:

        cp /etc/httpd/conf/httpd.conf ~/httpd.conf.backup

    {: .note}
    > By default, all files ending in the `.conf` extension in `/etc/httpd` and `/etc/httpd/conf.d/` are treated as Apache configuration files, and we recommend placing your non-standard configuration options in files in these directories. Regardless how you choose to organize your configuration files, making regular backups of known working states is highly recommended.

4. Edit the main Apache configuration file to adjust the resource use settings. The settings shown below are a good starting point for a **Linode 1GB**.

    {: .file }
    /etc/httpd/conf/httpd.conf
    :   ~~~ apache
        KeepAlive Off

        ...

        <IfModule prefork.c>
        StartServers 2
        MinSpareServers 6
        MaxSpareServers 12
        MaxClients 80
        MaxRequestsPerChild 3000
        </IfModule>
        ~~~

### Configure Name-based Virtual Hosts

There are different ways to set up virtual hosts; however, we recommend the method below. This configuration instructs Apache to listen on all IP addresses available to it.

1.  Create virtual host entries for each site that we need to host with this server. For this example we are using "example.com" and "example.org".

      {: .file-excerpt }
      /etc/httpd/conf.d/vhost.conf
      :   ~~~ apache
        NameVirtualHost *:80

        <VirtualHost *:80>
            ServerAdmin webmaster@example.com
            ServerName example.com
            ServerAlias www.example.com
            DocumentRoot /srv/www/example.com/public_html/
            ErrorLog /srv/www/example.com/logs/error.log
            CustomLog /srv/www/example.com/logs/access.log combined
        </VirtualHost>

        <VirtualHost *:80>
            ServerAdmin webmaster@example.org
            ServerName example.org
            ServerAlias www.example.org
            DocumentRoot /srv/www/example.org/public_html/
            ErrorLog /srv/www/example.org/logs/error.log
            CustomLog /srv/www/example.org/logs/access.log combined
          </VirtualHost>
          ~~~

    Notes regarding this example configuration:

    -   All of the files for the sites that you host will be located in directories that exist underneath `/srv/www`. You can symbolically link these directories into other locations if you need them to exist elsewhere.
    -   `ErrorLog` and `CustomLog` entries are suggested for more fine-grained logging, but are not required. If they are defined (as shown above), the `logs` directories must be created before you restart Apache.
