---
author:
  name: Joel Kruger
  email: jkruger@linode.com
description: 'Forcing all connections to use SSL with NodeBalancers.'
keywords: 'Linode,NodeBalancer,SSL,redirect'
license: '[CC BY-ND 3.0](http://creativecommons.org/licenses/by-nd/3.0/us/)'
modified: Monday, May 11th, 2015
modified_by:
  name: Joel Kruger
published: 'Monday, May 17th, 2015'
title: Forcing SSL connections with Nodebalancers
---

This guide provides step-by-step instructions for configuring a NodeBalancer to redirect all connections to SSL over port 443/HTTPS. Provisions will be provided to configure this with both the Apache and Nginx web servers. You will be responsible, however, for determining the appropriate document root as recommended by the distribution of Linux that your will be using.

 {: .note }
>
> Throughout this guide we will offer several suggested values for specific configuration settings, some of these values will be set by default. These settings are shown in the guide as a reference and you may need to modify them to suit your application accordingly.

## Prerequisites

- Your Linode should already be set up according to the instructions in our [Getting Started](/docs/getting-started) guide, and it is suggested that security precautions be implemented. For assistance with this, please see our documentation: [Securing Your Server](https://linode.com/docs/security/securing-your-server)

- This guide assumes that you have already deployed two Linodes and configured them with either a LAMP stack, or a LEMP Stack. If you have not, please review the following supportive documentation for assistance with configuring one:

    - [LAMP Stack](/docs/websites/lamp/)
    - [LEMP Stack](/docs/websites/lemp/)

- In addition, this guide assumes that you have already deployed a NodeBalancer and have configured it with two or more 'Backend' Linodes that make connections on port 80/HTTP. If you would like assitance with this, please review the following supportive documentation:

   - [Getting Started with NodeBalancers](/docs/platform/nodebalancer/getting-started-with-nodebalancers)
   - [NodeBalancer Reference Guide](/docs/platform/nodebalancer/nodebalancer-reference-guide)

{: .note}
>This guide is written, assuming that you are logged in as the root user and that you will not need to prepend commands with ``sudo``.

Follow these instructions to get a commercial SSL certificate installed on your server. Please note that commercial SSL certificates require a unique IP address for each certificate. As SSL certificates may be used by many kinds of software, these instructions are generic in nature. If you're intending to use your SSL certificate on a website powered by Apache, you should follow our [Apache SSL guides](/docs/web-servers/apache/ssl-guides/) instead.

Install OpenSSL
---------------

Issue the following command to install required packages for OpenSSL, the open source SSL toolkit.

Debian/Ubuntu users:

    apt-get update
    apt-get upgrade
    apt-get install openssl
    mkdir /etc/ssl/localcerts

CentOS/Fedora users:

    yum install openssl
    mkdir /etc/ssl/localcerts

Create a Certificate Signing Request
------------------------------------

Issue these commands to create a certificate signing request (CSR) for the site which you'd like to use with SSL. Be sure to change "www.mydomain.com" to reflect the fully qualified domain name (subdomain.domainname.com) of the site you'll be using SSL with. Leave the challenge password blank. We entered 365 for the days parameter to the command, as we would be paying for one year of SSL certificate verification from a commercial CA (certificate authority).

    cd /etc/ssl/localcerts
    openssl req -new -newkey rsa:2048 -nodes -days 365 -keyout www.mydomain.com.key -out www.mydomain.com.csr

Here are the values we entered for our example certificate. Note that you can ignore the extra attributes.

    Generating a 2048 bit RSA private key
    ......................................................++++++
    ....++++++
    writing new private key to 'www.mydomain.com.key'
    -----
    You are about to be asked to enter information that will be incorporated
    into your certificate request.
    What you are about to enter is what is called a Distinguished Name or a DN.
    There are quite a few fields but you can leave some blank
    For some fields there will be a default value,
    If you enter '.', the field will be left blank.
    -----
    Country Name (2 letter code) [AU]:US
    State or Province Name (full name) [Some-State]:New Jersey
    Locality Name (eg, city) []:Absecon
    Organization Name (eg, company) [Internet Widgits Pty Ltd]:MyDomain, LLC
    Organizational Unit Name (eg, section) []:Web Services
    Common Name (eg, YOUR name) []:www.mydomain.com
    Email Address []:support@mydomain.com

    Please enter the following 'extra' attributes
    to be sent with your certificate request
    A challenge password []:
    An optional company name []:

Execute the following command to protect the key:

    chmod 400 /etc/ssl/localcerts/www.mydomain.com.key

Files for your domain will be created in `/etc/ssl/localcerts`. You may now submit the file ending in `.csr` to a commercial SSL provider for signing. You will receive a signed file after the CA signs the request. Save this file as `/etc/ssl/localcerts/www.mydomain.com.crt`.

Execute the following command to protect the signed certificate:

    chmod 400 /etc/ssl/localcerts/www.mydomain.com.crt

Get the CA Root Certificate
---------------------------

Now you'll need to get the root certificate for the CA that you paid to sign your certificate. You may obtain the root certs for various providers from these sites:

-   [Verisign](https://knowledge.verisign.com/support/ssl-certificates-support/index.html)
-   [Thawte](http://www.thawte.com/roots/index.html)
-   [Globalsign](http://secure.globalsign.net/cacert/)
-   [Comodo](https://support.comodo.com/index.php?_m=downloads&_a=view&parentcategoryid=1&pcid=0&nav=0)


### Configure Name-based Virtual Hosts

There are different ways to set up virtual hosts; however, we recommend the method below. This configuration instructs Apache to listen on all IP addresses available to it.

1.  Create virtual host entries for each site that we need to host with this server. For this example we are using "example.com" and "example.org".

      {: .file-excerpt }
      /etc/httpd/conf.d/vhost.conf
      :   ~~~ apache
        NameVirtualHost *:80

        <VirtualHost *:80>
            ServerAdmin webmaster@example.com
            ServerName example.com
            ServerAlias www.example.com
            DocumentRoot /srv/www/example.com/public_html/
            ErrorLog /srv/www/example.com/logs/error.log
            CustomLog /srv/www/example.com/logs/access.log combined
        </VirtualHost>

        <VirtualHost *:80>
            ServerAdmin webmaster@example.org
            ServerName example.org
            ServerAlias www.example.org
            DocumentRoot /srv/www/example.org/public_html/
            ErrorLog /srv/www/example.org/logs/error.log
            CustomLog /srv/www/example.org/logs/access.log combined
          </VirtualHost>
          ~~~
